generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt

  // Relaciones:
  posts Post[] // Uno-a-muchos
  comments Comment[] // Uno-a-muchos
  likes Like[] // Uno-a-muchos

  followers Follows[] @relation("following") // usuarios que siguen a este usuario
  following Follows[] @relation("follower") // usuarios que este usuario sigue

  notifications Notification[] @relation("userNotifications") // notificaciones recibidas por un usuario
  notificationsCreated Notification[] @relation("notificationCreator") // notificaciones generadas por un usuario
}


model Post{
  id        String    @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relaciones
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade) // eliminación en cascada significa eliminar todas las publicaciones si se elimina el autor
  comments Comment[]
  likes Like[]
  notifications Notification[]
}


model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // Relaciones
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // índice compuesto para consultas más rápidas
}

model Like {
  id        String   @id @default(cuid())
  postId    String                 
  userId    String                 
  createdAt DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // índice compuesto para consultas más rápidas
  @@unique([userId,postId]) // esto evita que el mismo usuario le dé "me gusta" a una publicación dos veces
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relaciones
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // índice compuesto para consultas más rápidas
  @@id([followerId, followingId]) // clave primaria compuesta evita seguimientos duplicados
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relaciones
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}